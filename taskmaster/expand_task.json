{
  "model": "codellama:7b-instruct-q2_K",
  "options": {
    "num_predict": 8000,
    "temperature": 0.1
  },
  "messages": [
    {
      "content": "You are an AI assistant that responds ONLY with valid JSON objects as requested. The object should contain a 'subtasks' array. \n\n Always respond in Portuguese.",
      "role": "system"
    },
    {
      "content": "Analyze the following task and break it down into exactly 6 specific subtasks using your research capabilities. Assign sequential IDs starting from 1.\n\nParent Task:\nID: 3\nTitle: Criação do Projeto Scrapy e Spider Base\nDescription: Inicializar o projeto Scrapy e desenvolver um spider base com configurações para crawling ético, incluindo user-agent rotation e delays.\nCurrent details: Execute `scrapy startproject notebook_crawler`. No arquivo `settings.py`, configure: `ROBOTSTXT_OBEY = True`, `DOWNLOAD_DELAY = 3`, `CONCURRENT_REQUESTS_PER_DOMAIN = 2`. Configure um middleware para rotacionar `USER_AGENT` a partir de uma lista de agentes comuns para evitar bloqueios. O spider base deve conter a lógica de navegação e extração que possa ser herdada por spiders específicos de cada loja.\n\n# Project Context\n\n## Task Context\n\n**Task 3: Criação do Projeto Scrapy e Spider Base**\nDescription: Inicializar o projeto Scrapy e desenvolver um spider base com configurações para crawling ético, incluindo user-agent rotation e delays.\nStatus: pending\nPriority: high\nDependencies: 1\nImplementation Details: Execute `scrapy startproject notebook_crawler`. No arquivo `settings.py`, configure: `ROBOTSTXT_OBEY = True`, `DOWNLOAD_DELAY = 3`, `CONCURRENT_REQUESTS_PER_DOMAIN = 2`. Configure um middleware para rotacionar `USER_AGENT` a partir de uma lista de agentes comuns para evitar bloqueios. O spider base deve conter a lógica de navegação e extração que possa ser herdada por spiders específicos de cada loja.\nTest Strategy: Executar o spider base em modo de teste contra um site de exemplo (ex: `toscrape.com`) para garantir que as configurações de delay e user-agent estão sendo aplicadas. Verificar os logs de saída do Scrapy.\n\n---\n\n**Task 13: Implementação Opcional de Alertas via WhatsApp**\nDescription: Desenvolver um módulo opcional para enviar notificações via WhatsApp Web, dependente de configuração local.\nStatus: pending\nPriority: low\nDependencies: 8\nImplementation Details: Use uma biblioteca como `pywhatkit==5.4` ou `playwright==1.44.0` para automatizar o envio de mensagens via WhatsApp Web. A função deve receber a mensagem e o número do destinatário. O usuário precisará ter uma sessão do WhatsApp Web ativa no navegador. Documente claramente que esta é uma funcionalidade instável e requer interação do usuário (scan de QR code).\nTest Strategy: Crie um teste que envia uma mensagem para um número de telefone de teste. O teste exigirá configuração manual (sessão logada no WhatsApp Web). Verifique se a mensagem é formatada e enviada corretamente. Teste o que acontece se a sessão não estiver ativa.\n\n---\n\n**Task 14: Criação de Interface para Listagem e Filtragem de Resultados**\nDescription: Desenvolver uma funcionalidade na CLI para listar os notebooks coletados, com opções básicas de filtro.\nStatus: pending\nPriority: low\nDependencies: 7, 6\nImplementation Details: Adicione um novo comando à CLI (`click` ou `Typer`), por exemplo: `notebooks list --store Kabum! --max-price 5000`. Este comando deve consultar o banco de dados SQLite usando `peewee`, aplicando os filtros fornecidos, e exibir os resultados de forma formatada no terminal.\nTest Strategy: Execute o comando da CLI com diferentes combinações de filtros. Verifique se os resultados correspondem aos filtros aplicados. Teste o comando sem filtros para garantir que todos os resultados são exibidos. Verifique a formatação da saída no terminal.\n\n---\n\n**Task 9: Implementação do Sistema de Alertas por E-mail**\nDescription: Desenvolver um módulo para enviar notificações por e-mail quando um notebook corresponder a um critério de alerta.\nStatus: pending\nPriority: high\nDependencies: 8\nImplementation Details: Use as bibliotecas `smtplib` e `email.message` do Python. Crie uma função que recebe os dados do notebook e do critério, formata uma mensagem de e-mail em HTML e a envia. As credenciais do servidor SMTP (host, porta, usuário, senha) devem ser configuradas em um arquivo de configuração local (ex: `.env`) para não serem expostas no código.\nTest Strategy: Use um servidor SMTP de teste (como o `python -m smtpd -c DebuggingServer -n localhost:1025`) para capturar os e-mails enviados. Execute o módulo de notificação e verifique se o e-mail é gerado com o conteúdo e formato corretos, sem enviá-lo de fato para um destinatário externo.\n\n---\n\n**Task 7: Interface de Linha de Comando (CLI) para Gerenciar Critérios de Alerta**\nDescription: Desenvolver uma interface de linha de comando para que o usuário possa adicionar, remover e listar seus critérios de busca.\nStatus: pending\nPriority: medium\nDependencies: 2\nImplementation Details: Use a biblioteca `click` ou `Typer` para criar uma CLI intuitiva. Implemente os comandos: `criteria add --name 'Meu Notebook' --max-price 4000 --min-ram 16`, `criteria remove --name 'Meu Notebook'`, e `criteria list`. Os comandos devem interagir com a tabela `AlertCriteria` no banco de dados SQLite.\nTest Strategy: Execute a CLI a partir do terminal. Teste cada comando: adicione múltiplos critérios, liste-os para confirmar a inserção, remova um critério e liste novamente para confirmar a remoção. Teste com parâmetros inválidos para garantir o tratamento de erros.\n\nCRITICAL: Respond ONLY with a valid JSON object containing a single key \"subtasks\". The value must be an array of the generated subtasks, strictly matching this structure:\n\n{\n  \"subtasks\": [\n    {\n      \"id\": <number>, // Sequential ID starting from 1\n      \"title\": \"<string>\",\n      \"description\": \"<string>\",\n      \"dependencies\": [\"<string>\"], // Use full subtask IDs like [\"3.1\", \"3.2\"]. If no dependencies, use an empty array [].\n      \"details\": \"<string>\",\n      \"testStrategy\": \"<string>\" // Optional\n    },\n    // ... (repeat for 6 subtasks)\n  ]\n}\n\nImportant: For the 'dependencies' field, if a subtask has no dependencies, you MUST use an empty array, for example: \"dependencies\": []. Do not use null or omit the field.\n\nDo not include ANY explanatory text, markdown, or code block markers. Just the JSON object.",
      "role": "user"
    }
  ],
  "stream": false
}